#!/usr/bin/env bash

# Sorry, everyone
if (( ${BASH_VERSION%%.*} < 4 )); then
  echo "This script requires Bash >= 4. On OSX, try: brew install bash"
  exit 1
fi

# Any error is fatal.
set -e
# set -x # uncomment for debugging.

# The whole script makes the assumption that we're in the everest directory;
# this is a conservative method that ensures we switch to this directory first
# thing. Basically, this supports:
# - calling "everest" (in the PATH)
# - calling "./everest" (same directory)
# - calling "/path/to/everest"
# - calling "../path/to/everest"
# This bails for corner cases, e.g. "source everest" or "wget http://.../everest | bash"
cd_to_everest () {
  echo -n "Switching to the everest directory"
  if [[ ${0##*/} != "everest" ]]; then
    echo -e "\nThis script must be called via ./everest"
    exit 1
  fi
  if [[ $0 != ${0#*/} ]]; then
    # Relative or absolute path (contains /)
    cd $(dirname $0)
  else
    # Called via the path
    cd $(dirname $(which $0))
  fi
  echo " ... now in $(pwd)"
  echo
}
cd_to_everest

# "Modularity": include other files (requires us to be in the right directory)
source lib.sh
source repositories.sh
source hashes.sh

do_check ()
{
  blue "Checking environment"

  # Basic utilities
  success_or "which" "please execute this script in a Unix environment"
  if is_osx; then
    success_or "greadlink" "please run \"brew install coreutils\""
  fi

  # OCaml
  success_or "ocaml"
  ocaml -noinit -noprompt -stdin <<OCAML
    if Sys.ocaml_version < "4.02.2" then begin
      print_endline "ERROR: Everest needs OCaml >= 4.02.2";
      exit 1
    end
OCAML

  # OCamlfind & extra packages. Required OPAM packages are stored in
  # [opam-packages] with one package name per line
  success_or "ocamlfind"
  for p in $(cat opam-packages); do
    if ! ocamlfind query $p >/dev/null 2>&1; then
      red "ERROR: ocamlfind package $p is not installed"
      if_yes "opam install $p"
    fi
  done
  echo "... all ocamlfind packages found"

  # Test for the existence of fsc (windows) or fsharpc (other)
  if is_windows; then
    success_or "fsc"
  else
    success_or "fsharpc"
  fi

  # TODO: on Windows, check for all the quirks in my ocaml-installer wiki,
  # including broken OCaml setups, and download binaries for my (own copy) of
  # c:\ocamlmgw64 (which should not require any environment var tweak) and
  # ~/.opam.
}

do_env ()
{
  echo "Not implemented"
}

do_pull ()
{
  blue "Pulling; this implies git pull in every tracked project"
  warned=false
  for r in ${!repositories[@]}; do
    # Some sanity checks, and clone the repositories that aren't there already
    if [ ! -d $r ]; then
      if [ -e $r ]; then
        red "$r exists but is not a directory, aborting"
        exit 1
      fi
      if ! $warned; then
        echo Note: you\'re welcome to create symbolic links if you already have \
          cloned the repository elsewhere
        warned=true
      fi
      if_yes "git clone ${repositories[$r]} $r"
    fi

    # All sorts of git magic to try to figure out how to smartly checkout the
    # listed reference
    cd $r
    git fetch
    hash=${hashes[$r]}

    # Find the first remote branch that contains the desired commit
    branch=$(git branch -r --color=never --contains $hash | grep -v -- '->' | head -n 1 | cut -c 3-)

    if [[ $branch == "" ]]; then
      red "In $r, no know branch contains $hash! Seems like someone forgot to push a commit... trying anyhow"
      git checkout $hash

    else
      echo "In $r, $branch contains $hash"
      short=${branch#*/}
      echo "Trying to switch to branch $short"
      git checkout $short
      if [[ $(git rev-parse --abbrev-ref --symbolic-full-name @{u}) != $branch ]]; then
        red "Argh! $short is actually not tracking $branch... going for DETACHED HEAD"
        git checkout $hash
      elif ! git merge --ff $hash; then
        # Case where local branch has diverged from origin
        if_yes "git merge $hash"
      fi

    fi
    cd ..
  done
}

do_make ()
{
  blue "Rebuilding all projects"
  mkdir -p log
  echo
  blue "Rebuilding F*"
  make -C FStar/src/ocaml-output -j 15 | count "log/fstar"
  echo
  blue "Rebuilding miTLS"
  make -C mitls-fstar/src/tls -j 15 tls-gen | count "log/mitls-gen"
  echo
  blue "Rebuilding KreMLin"
  make -C kremlin -j 15 | count "log/kremlin"
}

do_snapshot ()
{
  blue "Recording a new snapshot"
  echo "declare -A hashes" > new-hashes.sh
  for r in ${!repositories[@]}; do
    cd $r
    head=$(git rev-parse HEAD)
    if [[ $(git branch -r --contains $head) == "" ]]; then
      red "WARNING: in repository $r, current revision $head has not been pushed!"
    fi
    cd ..
    echo "recording $r at revision $head"
    echo "hashes[$r]=$head" >> new-hashes.sh
  done
  mv new-hashes.sh hashes.sh
  cat <<MSG

New hashes have been recorded in hashes.sh. You can see the changes with git
diff.

If you intend to make this set of working revisions widely available, then you
must run commit and push.
MSG
}

print_usage ()
{
  cat <<HELP
OVERVIEW: $0, a high-level management script for Project Everest

USAGE: $0 COMMAND

COMMANDS:
  check     ensure that all the required programs are found in path

  env       print a set of environment variables that you should put in your ~/.bashrc

  pull      pull all projects and move them to the revisions specified by
            hashes.sh

  make      rebuild all projects

  snapshot  make the current state a new known set of working revisions; this
            writes into hashes.sh

  help      print the current message
HELP
}

# Parsing script arguments.
case "$1" in
  check)
    do_check
    ;;

  env)
    do_env
    ;;

  pull)
    do_pull
    ;;

  make)
    do_make
    ;;

  snapshot)
    do_snapshot
    ;;

  *)
    print_usage
    ;;
esac
